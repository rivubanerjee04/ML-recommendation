# -*- coding: utf-8 -*-
"""flipkart_review_CP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pE5Q0O7CXG0bxtNVS_-HYjy3qvRYnoci
"""

import pandas  as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import sys
import warnings
warnings.filterwarnings('ignore')
import re
import sklearn
from sklearn.feature_extraction.text import TfidfVectorizer
from wordcloud import WordCloud
import nltk
nltk.download('punkt')
nltk.download('stopwords')
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn.metrics import precision_score,accuracy_score,f1_score,recall_score
import sklearn

data = pd.read_csv('/content/flipkart_data.csv')
data.head(50)

x=data.values.tolist()
#the data is in list format only can't able to convert it in dictionary format
#the class of the data is in dataframe format not in list
#data.values.to_dict()
print(type(x))

data.info()

print(data.dropna(inplace=True))

pd.unique(data['rating'])

sns.countplot(data=data,
              x='rating',
              order=data.rating.value_counts().index)

print(data['rating'])

pos_neg = []
for i in range(len(data['rating'])):
    if data['rating'][i] >= 4:
        pos_neg.append(1)
    else:
        pos_neg.append(0)

data['Class_label'] = pos_neg
print(data)
print(pos_neg)

data['Class_label'].value_counts()

stp_words=stopwords.words('english')
def clean_review(x):
  cleanreview=" ".join(word for word in x.
                       split() if word not in stp_words)
  return cleanreview

data['Review']=data['review'].apply(clean_review)
print(data)
print(list(data))

consolidated=' '.join(word for word in data['Review'][data['Class_label']==0].astype(str))
wordCloud=WordCloud(width=1600,height=800,random_state=21,max_font_size=110)
plt.figure(figsize=(15,10))
plt.imshow(wordCloud.generate(consolidated),interpolation='bilinear')
plt.axis('off')
plt.show()

cv = TfidfVectorizer(max_features=2500)
X = cv.fit_transform(data['Review'] ).toarray()
print(X.shape)
print(X)

from sklearn.model_selection import train_test_split
x_train ,x_test,y_train,y_test=train_test_split(X,data['Class_label'],
                                                test_size=0.10 ,
                                                random_state=42)

print(x_train.shape)

print(y_train.shape)

print(x_test.shape)

print(y_test)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

model=LogisticRegression()


model.fit(x_train,y_train)


pred=model.predict(x_test)


print(accuracy_score(y_test,pred))

from sklearn import metrics
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test,pred)

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm,
                                            display_labels = [False, True])

cm_display.plot()
plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test, pred))

from sklearn import svm

#Create a svm Classifier
clf = svm.SVC(kernel='rbf') # Linear Kernel

#Train the model using the training sets
clf.fit(x_train, y_train)

#Predict the response for test dataset
y_pred = clf.predict(x_test)

cm = confusion_matrix(y_test,pred)

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm,
                                            display_labels = [False, True])

cm_display.plot()
plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test, pred))

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(x_train, y_train)

pred = rf.predict(x_test)

cm = confusion_matrix(y_test,pred)

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm,
                                            display_labels = [False, True])

cm_display.plot()
plt.show()

print(classification_report(y_test, pred))

from sklearn.neighbors import KNeighborsClassifier

data2 = KNeighborsClassifier()
data2.fit(x_train,y_train)

prediction = model.predict(x_test)
print(accuracy_score(y_test,prediction))

from sklearn import metrics
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test,pred)

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm,
                                            display_labels = [False, True])

cm_display.plot()
plt.show()

print(classification_report(y_test, pred))

#pca = PCA(n_components=20)
#X_train = pca.fit_transform(X_train)
#X_test = pca.transform(X_test)